apiVersion: argoproj.io/v1alpha1  # API version for Argo CD Application
kind: Application  # Kind of the resource
metadata:
  name: arc-runners-d-in-d-rootless  # Name of the Argo CD application
  namespace: argocd  # Namespace where Argo CD application resides
  finalizers:
    - resources-finalizer.argocd.argoproj.io  # Ensures resources are cleaned up when the application is deleted
spec:
  project: arc  # Project in Argo CD where the application belongs
  source:
    repoURL: ghcr.io/actions/actions-runner-controller-charts  # Repository URL for the Helm chart
    targetRevision: 0.6.1  # Version of the Helm chart to use
    chart: gha-runner-scale-set  # Helm chart name
    helm:
      releaseName: "arc-runners-d-in-d-rootless"  # Override the Helm release name
      values: |  # Inline Helm values for customizing the deployment
        githubConfigUrl: "https://github.com/containerization-vgroup"  # URL for the GitHub configuration
        githubConfigSecret: "pre-defined-secret"  # Kubernetes secret with GitHub token
        controllerServiceAccount:
          namespace: arc-system  # Namespace for the controller's service account
          name: arc-gha-rs-controller  # Name of the service account
        minRunners: 2  # Minimum number of runners
        maxRunners: 10  # Maximum number of runners
        runnerGroup: "arc-runners-d-in-d-rootless"  # GitHub runner group name
        listenerTemplate:
          spec:
            containers:
            - name: listener  # Name of the listener container
          metadata:
            annotations:
              "prometheus.io/scrape": "true"  # Enable Prometheus scraping
              "prometheus.io/path": "/metrics"  # Metrics path for Prometheus
              "prometheus.io/port": "8080"  # Port for Prometheus to scrape
        template:
          spec:
            containers:
              - name: runner  # Name of the runner container
                image: ghcr.io/actions/actions-runner:latest  # Docker image for the runner
                command: ["/home/runner/run.sh"]  # Command to run inside the container
                env:
                - name: runtime
                  value: "kubernetes"  # Set runtime environment
                - name: DOCKER_HOST
                  value: "tcp://localhost:2375"  # Set Docker host for DIND
                volumeMounts:
                - name: work
                  mountPath: /home/runner/work  # Mount path for work directory
                - name: docker-socket
                  mountPath: /var/run/docker.sock  # Mount path for Docker socket
              - name: dind-rootless  # Name of the dind-rootless container
                image: docker:26.1-dind-rootless  # Docker image for DIND rootless
                securityContext:
                  runAsUser: 1000  # Run as non-root user
                  runAsGroup: 1000  # Run as non-root group
                  privileged: true  # Required for disabling seccomp, AppArmor, and mount masks
                volumeMounts:
                - name: docker-socket
                  mountPath: /var/run/docker.sock  # Mount Docker socket volume
                env:
                - name: DOCKER_TLS_CERTDIR
                  value: ""  # Disable TLS for Docker
                - name: DOCKER_HOST
                  value: "tcp://localhost:2375"  # Set Docker host
                - name: DOCKER_DRIVER
                  value: "overlay2"  # Set Docker storage driver
            volumes:
            - name: work
              emptyDir: {}  # Create an empty directory volume for work
            - name: docker-socket
              emptyDir: {}  # Create an empty directory volume for Docker socket (supports rootless mode)
      version: v3  # Helm version to use

  destination:
    server: https://kubernetes.default.svc  # Kubernetes API server URL
    namespace: arc-runners-d-in-d-rootless  # Namespace to deploy the application

  syncPolicy:
    automated:
      prune: true  # Automatically prune resources that are no longer defined in the source
      selfHeal: true  # Automatically sync if the cluster state changes
      allowEmpty: false  # Do not allow empty application (no resources)
    syncOptions:
    - Validate=false  # Disable resource validation
    - CreateNamespace=true  # Automatically create the target namespace if it doesn't exist
    - ServerSideApply=true  # Use server-side apply for resource management
    retry:
      limit: 5  # Number of retry attempts for failed syncs
      backoff:
        duration: 5s  # Initial backoff duration
        factor: 2  # Backoff factor
        maxDuration: 3m  # Maximum backoff duration
